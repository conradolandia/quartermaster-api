// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  BoatsReadBoatsData,
  BoatsReadBoatsResponse,
  BoatsCreateBoatData,
  BoatsCreateBoatResponse,
  BoatsReadBoatData,
  BoatsReadBoatResponse,
  BoatsUpdateBoatData,
  BoatsUpdateBoatResponse,
  BoatsDeleteBoatData,
  BoatsDeleteBoatResponse,
  BoatsReadBoatsByJurisdictionData,
  BoatsReadBoatsByJurisdictionResponse,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  JurisdictionsReadJurisdictionsData,
  JurisdictionsReadJurisdictionsResponse,
  JurisdictionsCreateJurisdictionData,
  JurisdictionsCreateJurisdictionResponse,
  JurisdictionsReadJurisdictionData,
  JurisdictionsReadJurisdictionResponse,
  JurisdictionsUpdateJurisdictionData,
  JurisdictionsUpdateJurisdictionResponse,
  JurisdictionsDeleteJurisdictionData,
  JurisdictionsDeleteJurisdictionResponse,
  LaunchesReadLaunchesData,
  LaunchesReadLaunchesResponse,
  LaunchesCreateLaunchData,
  LaunchesCreateLaunchResponse,
  LaunchesReadLaunchData,
  LaunchesReadLaunchResponse,
  LaunchesUpdateLaunchData,
  LaunchesUpdateLaunchResponse,
  LaunchesDeleteLaunchData,
  LaunchesDeleteLaunchResponse,
  LaunchesReadLaunchesByLocationData,
  LaunchesReadLaunchesByLocationResponse,
  LocationsReadLocationsData,
  LocationsReadLocationsResponse,
  LocationsCreateLocationData,
  LocationsCreateLocationResponse,
  LocationsReadLocationData,
  LocationsReadLocationResponse,
  LocationsUpdateLocationData,
  LocationsUpdateLocationResponse,
  LocationsDeleteLocationData,
  LocationsDeleteLocationResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  MissionsReadMissionsData,
  MissionsReadMissionsResponse,
  MissionsCreateMissionData,
  MissionsCreateMissionResponse,
  MissionsReadMissionData,
  MissionsReadMissionResponse,
  MissionsUpdateMissionData,
  MissionsUpdateMissionResponse,
  MissionsDeleteMissionData,
  MissionsDeleteMissionResponse,
  MissionsReadMissionsByLaunchData,
  MissionsReadMissionsByLaunchResponse,
  MissionsReadActiveMissionsData,
  MissionsReadActiveMissionsResponse,
  MissionsReadPublicMissionsData,
  MissionsReadPublicMissionsResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
  UtilsGetUsStatesResponse,
} from "./types.gen"

export class BoatsService {
  /**
   * Read Boats
   * Retrieve boats.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns BoatsPublic Successful Response
   * @throws ApiError
   */
  public static readBoats(
    data: BoatsReadBoatsData = {},
  ): CancelablePromise<BoatsReadBoatsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/boats/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Boat
   * Create new boat.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns BoatPublic Successful Response
   * @throws ApiError
   */
  public static createBoat(
    data: BoatsCreateBoatData,
  ): CancelablePromise<BoatsCreateBoatResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/boats/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Boat
   * Get boat by ID.
   * @param data The data for the request.
   * @param data.boatId
   * @returns BoatPublic Successful Response
   * @throws ApiError
   */
  public static readBoat(
    data: BoatsReadBoatData,
  ): CancelablePromise<BoatsReadBoatResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/boats/{boat_id}",
      path: {
        boat_id: data.boatId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Boat
   * Update a boat.
   * @param data The data for the request.
   * @param data.boatId
   * @param data.requestBody
   * @returns BoatPublic Successful Response
   * @throws ApiError
   */
  public static updateBoat(
    data: BoatsUpdateBoatData,
  ): CancelablePromise<BoatsUpdateBoatResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/boats/{boat_id}",
      path: {
        boat_id: data.boatId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Boat
   * Delete a boat.
   * @param data The data for the request.
   * @param data.boatId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteBoat(
    data: BoatsDeleteBoatData,
  ): CancelablePromise<BoatsDeleteBoatResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/boats/{boat_id}",
      path: {
        boat_id: data.boatId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Boats By Jurisdiction
   * Retrieve boats for a specific jurisdiction.
   * @param data The data for the request.
   * @param data.jurisdictionId
   * @param data.skip
   * @param data.limit
   * @returns BoatsPublic Successful Response
   * @throws ApiError
   */
  public static readBoatsByJurisdiction(
    data: BoatsReadBoatsByJurisdictionData,
  ): CancelablePromise<BoatsReadBoatsByJurisdictionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/boats/jurisdiction/{jurisdiction_id}",
      path: {
        jurisdiction_id: data.jurisdictionId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class JurisdictionsService {
  /**
   * Read Jurisdictions
   * Retrieve jurisdictions with optional filtering by location.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.locationId
   * @returns JurisdictionsPublic Successful Response
   * @throws ApiError
   */
  public static readJurisdictions(
    data: JurisdictionsReadJurisdictionsData = {},
  ): CancelablePromise<JurisdictionsReadJurisdictionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jurisdictions/",
      query: {
        skip: data.skip,
        limit: data.limit,
        location_id: data.locationId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Jurisdiction
   * Create new jurisdiction.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns JurisdictionPublic Successful Response
   * @throws ApiError
   */
  public static createJurisdiction(
    data: JurisdictionsCreateJurisdictionData,
  ): CancelablePromise<JurisdictionsCreateJurisdictionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jurisdictions/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Jurisdiction
   * Get jurisdiction by ID.
   * @param data The data for the request.
   * @param data.jurisdictionId
   * @returns JurisdictionPublic Successful Response
   * @throws ApiError
   */
  public static readJurisdiction(
    data: JurisdictionsReadJurisdictionData,
  ): CancelablePromise<JurisdictionsReadJurisdictionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jurisdictions/{jurisdiction_id}",
      path: {
        jurisdiction_id: data.jurisdictionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Jurisdiction
   * Update a jurisdiction.
   * @param data The data for the request.
   * @param data.jurisdictionId
   * @param data.requestBody
   * @returns JurisdictionPublic Successful Response
   * @throws ApiError
   */
  public static updateJurisdiction(
    data: JurisdictionsUpdateJurisdictionData,
  ): CancelablePromise<JurisdictionsUpdateJurisdictionResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/jurisdictions/{jurisdiction_id}",
      path: {
        jurisdiction_id: data.jurisdictionId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Jurisdiction
   * Delete a jurisdiction.
   * @param data The data for the request.
   * @param data.jurisdictionId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteJurisdiction(
    data: JurisdictionsDeleteJurisdictionData,
  ): CancelablePromise<JurisdictionsDeleteJurisdictionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/jurisdictions/{jurisdiction_id}",
      path: {
        jurisdiction_id: data.jurisdictionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LaunchesService {
  /**
   * Read Launches
   * Retrieve launches.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns LaunchesPublic Successful Response
   * @throws ApiError
   */
  public static readLaunches(
    data: LaunchesReadLaunchesData = {},
  ): CancelablePromise<LaunchesReadLaunchesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/launches/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Launch
   * Create new launch.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LaunchPublic Successful Response
   * @throws ApiError
   */
  public static createLaunch(
    data: LaunchesCreateLaunchData,
  ): CancelablePromise<LaunchesCreateLaunchResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/launches/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Launch
   * Get launch by ID.
   * @param data The data for the request.
   * @param data.launchId
   * @returns LaunchPublic Successful Response
   * @throws ApiError
   */
  public static readLaunch(
    data: LaunchesReadLaunchData,
  ): CancelablePromise<LaunchesReadLaunchResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/launches/{launch_id}",
      path: {
        launch_id: data.launchId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Launch
   * Update a launch.
   * @param data The data for the request.
   * @param data.launchId
   * @param data.requestBody
   * @returns LaunchPublic Successful Response
   * @throws ApiError
   */
  public static updateLaunch(
    data: LaunchesUpdateLaunchData,
  ): CancelablePromise<LaunchesUpdateLaunchResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/launches/{launch_id}",
      path: {
        launch_id: data.launchId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Launch
   * Delete a launch.
   * @param data The data for the request.
   * @param data.launchId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteLaunch(
    data: LaunchesDeleteLaunchData,
  ): CancelablePromise<LaunchesDeleteLaunchResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/launches/{launch_id}",
      path: {
        launch_id: data.launchId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Launches By Location
   * Retrieve launches for a specific location.
   * @param data The data for the request.
   * @param data.locationId
   * @param data.skip
   * @param data.limit
   * @returns LaunchesPublic Successful Response
   * @throws ApiError
   */
  public static readLaunchesByLocation(
    data: LaunchesReadLaunchesByLocationData,
  ): CancelablePromise<LaunchesReadLaunchesByLocationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/launches/location/{location_id}",
      path: {
        location_id: data.locationId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LocationsService {
  /**
   * Read Locations
   * Retrieve locations.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns LocationsPublic Successful Response
   * @throws ApiError
   */
  public static readLocations(
    data: LocationsReadLocationsData = {},
  ): CancelablePromise<LocationsReadLocationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/locations/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Location
   * Create new location.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LocationPublic Successful Response
   * @throws ApiError
   */
  public static createLocation(
    data: LocationsCreateLocationData,
  ): CancelablePromise<LocationsCreateLocationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/locations/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Location
   * Get location by ID.
   * @param data The data for the request.
   * @param data.locationId
   * @returns LocationPublic Successful Response
   * @throws ApiError
   */
  public static readLocation(
    data: LocationsReadLocationData,
  ): CancelablePromise<LocationsReadLocationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/locations/{location_id}",
      path: {
        location_id: data.locationId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Location
   * Update a location.
   * @param data The data for the request.
   * @param data.locationId
   * @param data.requestBody
   * @returns LocationPublic Successful Response
   * @throws ApiError
   */
  public static updateLocation(
    data: LocationsUpdateLocationData,
  ): CancelablePromise<LocationsUpdateLocationResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/locations/{location_id}",
      path: {
        location_id: data.locationId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Location
   * Delete a location.
   * @param data The data for the request.
   * @param data.locationId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteLocation(
    data: LocationsDeleteLocationData,
  ): CancelablePromise<LocationsDeleteLocationResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/locations/{location_id}",
      path: {
        location_id: data.locationId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class MissionsService {
  /**
   * Read Missions
   * Retrieve missions.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns MissionsPublic Successful Response
   * @throws ApiError
   */
  public static readMissions(
    data: MissionsReadMissionsData = {},
  ): CancelablePromise<MissionsReadMissionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/missions/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Mission
   * Create new mission.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MissionPublic Successful Response
   * @throws ApiError
   */
  public static createMission(
    data: MissionsCreateMissionData,
  ): CancelablePromise<MissionsCreateMissionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/missions/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Mission
   * Get mission by ID.
   * @param data The data for the request.
   * @param data.missionId
   * @returns MissionPublic Successful Response
   * @throws ApiError
   */
  public static readMission(
    data: MissionsReadMissionData,
  ): CancelablePromise<MissionsReadMissionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/missions/{mission_id}",
      path: {
        mission_id: data.missionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Mission
   * Update a mission.
   * @param data The data for the request.
   * @param data.missionId
   * @param data.requestBody
   * @returns MissionPublic Successful Response
   * @throws ApiError
   */
  public static updateMission(
    data: MissionsUpdateMissionData,
  ): CancelablePromise<MissionsUpdateMissionResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/missions/{mission_id}",
      path: {
        mission_id: data.missionId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Mission
   * Delete a mission.
   * @param data The data for the request.
   * @param data.missionId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteMission(
    data: MissionsDeleteMissionData,
  ): CancelablePromise<MissionsDeleteMissionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/missions/{mission_id}",
      path: {
        mission_id: data.missionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Missions By Launch
   * Retrieve missions for a specific launch.
   * @param data The data for the request.
   * @param data.launchId
   * @param data.skip
   * @param data.limit
   * @returns MissionsPublic Successful Response
   * @throws ApiError
   */
  public static readMissionsByLaunch(
    data: MissionsReadMissionsByLaunchData,
  ): CancelablePromise<MissionsReadMissionsByLaunchResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/missions/launch/{launch_id}",
      path: {
        launch_id: data.launchId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Active Missions
   * Retrieve active missions.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns MissionsPublic Successful Response
   * @throws ApiError
   */
  public static readActiveMissions(
    data: MissionsReadActiveMissionsData = {},
  ): CancelablePromise<MissionsReadActiveMissionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/missions/active/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Public Missions
   * Retrieve public missions.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns MissionsPublic Successful Response
   * @throws ApiError
   */
  public static readPublicMissions(
    data: MissionsReadPublicMissionsData = {},
  ): CancelablePromise<MissionsReadPublicMissionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/missions/public/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * Health check endpoint.
   * @returns string Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }

  /**
   * Get Us States
   * Get a list of US states.
   * @returns string Successful Response
   * @throws ApiError
   */
  public static getUsStates(): CancelablePromise<UtilsGetUsStatesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/us-states/",
    })
  }
}
